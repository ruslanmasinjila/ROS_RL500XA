/* Auto-generated by genmsg_cpp for file /home/ruslan/ros_workspace/ros_rl500xa/msg/fromObserver_msg.msg */
#ifndef ROS_RL500XA_MESSAGE_FROMOBSERVER_MSG_H
#define ROS_RL500XA_MESSAGE_FROMOBSERVER_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ros_rl500xa
{
template <class ContainerAllocator>
struct fromObserver_msg_ {
  typedef fromObserver_msg_<ContainerAllocator> Type;

  fromObserver_msg_()
  : coordinates()
  , observerID()
  {
  }

  fromObserver_msg_(const ContainerAllocator& _alloc)
  : coordinates(_alloc)
  , observerID(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _coordinates_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  coordinates;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _observerID_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  observerID;


  typedef boost::shared_ptr< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct fromObserver_msg
typedef  ::ros_rl500xa::fromObserver_msg_<std::allocator<void> > fromObserver_msg;

typedef boost::shared_ptr< ::ros_rl500xa::fromObserver_msg> fromObserver_msgPtr;
typedef boost::shared_ptr< ::ros_rl500xa::fromObserver_msg const> fromObserver_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ros_rl500xa

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1cf750dc7f71074725cc226409006b37";
  }

  static const char* value(const  ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1cf750dc7f710747ULL;
  static const uint64_t static_value2 = 0x25cc226409006b37ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_rl500xa/fromObserver_msg";
  }

  static const char* value(const  ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] coordinates\n\
string observerID\n\
\n\
";
  }

  static const char* value(const  ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.coordinates);
    stream.next(m.observerID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct fromObserver_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ros_rl500xa::fromObserver_msg_<ContainerAllocator> & v) 
  {
    s << indent << "coordinates[]" << std::endl;
    for (size_t i = 0; i < v.coordinates.size(); ++i)
    {
      s << indent << "  coordinates[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.coordinates[i]);
    }
    s << indent << "observerID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.observerID);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROS_RL500XA_MESSAGE_FROMOBSERVER_MSG_H

