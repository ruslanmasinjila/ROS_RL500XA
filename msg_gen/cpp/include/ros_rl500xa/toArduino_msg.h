/* Auto-generated by genmsg_cpp for file /home/ruslan/ros_workspace/ros_rl500xa/msg/toArduino_msg.msg */
#ifndef ROS_RL500XA_MESSAGE_TOARDUINO_MSG_H
#define ROS_RL500XA_MESSAGE_TOARDUINO_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ros_rl500xa
{
template <class ContainerAllocator>
struct toArduino_msg_ {
  typedef toArduino_msg_<ContainerAllocator> Type;

  toArduino_msg_()
  : fr_pwm(0)
  , lr_pwm(0)
  , turret_pulse_width(0)
  , xAxisDirection()
  , yAxisDirection()
  , movingRobot(0)
  , sendEncoderData(0)
  , resetEncoders(0)
  {
  }

  toArduino_msg_(const ContainerAllocator& _alloc)
  : fr_pwm(0)
  , lr_pwm(0)
  , turret_pulse_width(0)
  , xAxisDirection(_alloc)
  , yAxisDirection(_alloc)
  , movingRobot(0)
  , sendEncoderData(0)
  , resetEncoders(0)
  {
  }

  typedef int32_t _fr_pwm_type;
  int32_t fr_pwm;

  typedef int32_t _lr_pwm_type;
  int32_t lr_pwm;

  typedef int32_t _turret_pulse_width_type;
  int32_t turret_pulse_width;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _xAxisDirection_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  xAxisDirection;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _yAxisDirection_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  yAxisDirection;

  typedef int32_t _movingRobot_type;
  int32_t movingRobot;

  typedef int32_t _sendEncoderData_type;
  int32_t sendEncoderData;

  typedef int32_t _resetEncoders_type;
  int32_t resetEncoders;


  typedef boost::shared_ptr< ::ros_rl500xa::toArduino_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_rl500xa::toArduino_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct toArduino_msg
typedef  ::ros_rl500xa::toArduino_msg_<std::allocator<void> > toArduino_msg;

typedef boost::shared_ptr< ::ros_rl500xa::toArduino_msg> toArduino_msgPtr;
typedef boost::shared_ptr< ::ros_rl500xa::toArduino_msg const> toArduino_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ros_rl500xa::toArduino_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ros_rl500xa::toArduino_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ros_rl500xa

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ros_rl500xa::toArduino_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ros_rl500xa::toArduino_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ros_rl500xa::toArduino_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f91b4a8598aa3fa9c07c3c68c4411337";
  }

  static const char* value(const  ::ros_rl500xa::toArduino_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf91b4a8598aa3fa9ULL;
  static const uint64_t static_value2 = 0xc07c3c68c4411337ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_rl500xa::toArduino_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ros_rl500xa/toArduino_msg";
  }

  static const char* value(const  ::ros_rl500xa::toArduino_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ros_rl500xa::toArduino_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 fr_pwm\n\
int32 lr_pwm\n\
int32 turret_pulse_width\n\
string xAxisDirection\n\
string yAxisDirection\n\
int32 movingRobot\n\
int32 sendEncoderData\n\
int32 resetEncoders\n\
\n\
";
  }

  static const char* value(const  ::ros_rl500xa::toArduino_msg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ros_rl500xa::toArduino_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.fr_pwm);
    stream.next(m.lr_pwm);
    stream.next(m.turret_pulse_width);
    stream.next(m.xAxisDirection);
    stream.next(m.yAxisDirection);
    stream.next(m.movingRobot);
    stream.next(m.sendEncoderData);
    stream.next(m.resetEncoders);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct toArduino_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_rl500xa::toArduino_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ros_rl500xa::toArduino_msg_<ContainerAllocator> & v) 
  {
    s << indent << "fr_pwm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fr_pwm);
    s << indent << "lr_pwm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lr_pwm);
    s << indent << "turret_pulse_width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turret_pulse_width);
    s << indent << "xAxisDirection: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.xAxisDirection);
    s << indent << "yAxisDirection: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.yAxisDirection);
    s << indent << "movingRobot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.movingRobot);
    s << indent << "sendEncoderData: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sendEncoderData);
    s << indent << "resetEncoders: ";
    Printer<int32_t>::stream(s, indent + "  ", v.resetEncoders);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROS_RL500XA_MESSAGE_TOARDUINO_MSG_H

